#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Feb 19, 2021 10:33:52 PM EST  platform: Windows NT


import sys
import time
import datetime as dt
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import winsound

# google api stuff
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
credentials = ServiceAccountCredentials.from_json_keyfile_name('credential_key_file_pomodoro.json', scope)
gc = gspread.authorize(credentials)
# sheet1
wks = gc.open('Pomodoro').get_worksheet(0)
# sheet2
data = gc.open('Pomodoro').get_worksheet(1)
# get sheet by indexing it with get_worksheet(i)

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True
from tkinter import *


def set_Tk_var():
    global work_time
    work_time = tk.IntVar()
    work_time.set('work_time')
    global break_time
    break_time = tk.IntVar()
    break_time.set('break_time')


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    refresh()


def pop_sheet():
    # populate sheets with the necessary column titles and place holder data
    # if-else statements to check cell data before overwriting
    # should only be ran one time ever
    print("Populate sheets")


def add_item():
    # item with not text or just a space cause a gap in data and deleting
    # it with the program deletes the first item instead

    # get text entry from text box
    text_entry = w.Entry1.get()
    # append it to the main column
    wks.append_row([text_entry])
    # refresh the list box
    refresh()


def delete():
    # use the anchor to delete the item from the google sheet
    item_to_delete = w.Listbox1.get(ANCHOR)
    if item_to_delete in wks.col_values(1):
        cell = wks.find(item_to_delete)
        cell_num = cell.row
        wks.delete_rows(cell_num)
    refresh()


def refresh():
    print("Refreshing...")
    w.Listbox1.delete(0, END)
    for item in wks.col_values(1)[1:]:
        w.Listbox1.insert(END, item)

    w.Listbox2.delete(0, END)
    for item in wks.col_values(2)[1:]:
        w.Listbox2.insert(END, item)


def stats():
    # add current session data to data sheet
    data.update_cell(2, 2, int(total_pomodoros))
    data.update_cell(3, 2, int(total_pomodoros * work_time.get()))
    data.update_cell(4, 2, int(total_pomodoros * break_time.get()))
    # store cell data into variables
    session_list = data.col_values(2, value_render_option='UNFORMATTED_VALUE')[1:]
    lifetime_list = data.col_values(3, value_render_option='UNFORMATTED_VALUE')[1:]
    session_pomo, session_work_time, session_break_time = session_list
    lifetime_pomo, lifetime_work_time, lifetime_break_time = lifetime_list
    # update lifetime stats on sheet2
    lifetime_pomo += session_pomo
    lifetime_work_time += session_work_time
    lifetime_break_time += session_break_time
    data.update_cell(2, 3, lifetime_pomo)
    data.update_cell(3, 3, lifetime_work_time)
    data.update_cell(4, 3, lifetime_break_time)
    # update sheet1 lifetime stats
    wks.update_cell(2, 2, "Lifetime Pomodoros " + str(lifetime_pomo/60) + " hours")
    wks.update_cell(3, 2, "Lifetime work time " + str(lifetime_work_time/60) + " hours")
    wks.update_cell(4, 2, "Lifetime break time " + str(lifetime_break_time/60) + " hours")

    # reset the session data
    data.update_cell(2, 2, 0)
    data.update_cell(3, 2, 0)
    data.update_cell(4, 2, 0)
    # update list boxes
    refresh()


def start_timer():
    global total_pomodoros
    # timer variables
    t_curr = dt.datetime.now()  # get the current time
    t_pom = work_time.get() * 60  # pomodoro time
    t_delta = dt.timedelta(0, t_pom)  # time delta in minutes
    t_fut = t_curr + t_delta  # future time to end timer
    delta_sec = break_time.get() * 60  # break time after pomodoro
    t_fin = t_curr + dt.timedelta(0, t_pom + delta_sec)
    timenow = t_curr.strftime("%H:%M")
    # variable for user statistics
    # break_time and work_time are global variables
    total_pomodoros = 0
    breaks = 0
    # show timer message
    w.messagebox.showinfo("Pomodoro Started!",
                          "\nIt is now " + timenow + " hrs. \nTimer set for " + str(work_time.get()) + " minutes. ")

    # hide the tkinter window otherwise the user will click on it and it will cause the program to stop running
    # tkinter queueing is necessary to run both at the same time (implement at some other time)
    root.withdraw()
    while True:
        # pomo time
        if t_curr < t_fut:
            print("pomodoro")
        elif t_fut <= t_curr <= t_fin:
            print("in break")
            if breaks == 0:
                print("if break")
                # alarm sound
                for i in range(5):
                    winsound.Beep((i + 100), 700)
                print("Break time!")
                w.messagebox.showinfo("Breaktime!", "Your " + str(
                    break_time.get()) + " minute break has now started! Go get some water.")
                breaks += 1
        else:
            print("finished")
            breaks = 0
            # increment pomodoro number, write use stats with stats() to sheets, and reset the break number
            total_pomodoros += 1
            # sound that the break is over
            for i in range(10):
                winsound.Beep((i + 100), 500)
            # prompt to start another timer
            root.update()
            root.deiconify()
            user_ans = w.messagebox.askyesno("Pomodoro Finished!", "Would you like to start another pomodoro?")
            # refresh user stats

            if user_ans:
                # update old time values to the current time
                t_curr = dt.datetime.now()
                t_fut = t_curr + dt.timedelta(0, t_pom)
                t_fin = t_curr + dt.timedelta(0, t_pom + delta_sec)
                continue
            elif not user_ans:
                # user is done and display stats
                stats()
                w.messagebox.showinfo("Pomodoro Finished!",
                                      "\nYou completed " + str(total_pomodoros) + " pomodoros today!")

                break
        print("sleeping")
        time.sleep(15)
        t_curr = dt.datetime.now()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


if __name__ == '__main__':
    import NoteBookPomo
    NoteBookPomo.vp_start_gui()
